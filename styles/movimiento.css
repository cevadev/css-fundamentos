html {
    box-sizing: border-box;
    font-family: sans-serif;
    font-size: 16px;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

.box {
    border: thin solid #000;
    width: 200px;
    height: 200px;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5rem;
}

.card {
    border: thick solid #000;
    width: 600px;
    height: 400px;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5rem;
}

.card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: 0% 50%;
}

/*
Transiciones
    transition-property
    transition-duration
    transition-timing-function: none linear ease ease-in ease-out ease-in-out steps
    transition-delay
    transition: property duration timing-function delay
*/
.transitions .box{
    background-color: magenta;
    border-color: green;
    /*indicamos la propiedad que queremos modificar*/
    transition-property: background-color;
    /*duracion de la transicion*/
    transition-duration: 500ms;
    /*tipo de la aceleracion: elegimos aceleracion general*/
    transition-timing-function: ease;
    /*aplicamos delay a la transicion, que espere medio segundo y luego inicie la transicion */
    transition-delay: 0.5s;
    /*modificamos la propiedad border-color, que dure 3 segundos, que sea un efecto de animacion lineal
      con un delay de 1 segundo*/
    transition: border-color 3s linear 1s;

    /*aplicamos estilos a todas las propiedades que se puedan animar, en nuestro caso se aplicaran a background-color y
      border-color y border-radius. Una duracion de 2 segundos con un efecto de aceleracion ease-in-out, con un delay de 
      250ms*/
    /*transition: all 2s ease-in-out 250ms;*/

    /*en lugar de hacer un .transition: all vamos aplicar transiciones a cada propiedad*/
    transition: background-color 2s ease-in-out 250ms,
     border-color 2s ease-in-out 250ms,
     border-radius 2s ease-in-out 250ms;
}

.transitions .box:hover{
    background-color: cyan;
    border-color: red;
    border-radius: 2rem;
    /*no todas las propiedades son animable como border styles*/
    /*border-style: dashed;*/
}

.transitions .card{
    /*aplicamos la transition a cada propiedad una por una*/
    transition: opacity 1s ease-out, 
     border-color 3s steps(3),
     filter 2s ease-in 1s,
     box-shadow 1.5s linear 2s;
}

.transitions .card:hover{
    opacity: .75;
    border-color: orchid;
    filter: blur(.15rem);
    box-shadow: 1rem 1rem 2rem .5rem #000;
}

/*animamos object-position en x de 0 a 100*/
.transitions .card img{
    /*delay de 3seg: primero realiza las animaciones de .transition .card*/
    transition: object-position 2s ease-in-out 3s;
}

.transitions .card img:hover{
    object-position: 100% 50%;
}

/*Transformaciones en 2D. Las transformaciones se haran sobre la imgaen que esta dentro de la card*/
.transform-2d img{
    /*animamos la propiedad transform*/
    transition: transform .5s ease-in-out;
}

/*las transformaciones se aplicaran en el estado hover de la imagen*/
.transform-2d img:hover{
    transform: none;
    /*movemos la imagen 4rem respecto de su posicion original en el eje X*/
    transform: translateX(4rem);
    /*movemos la imagen 4rem respecto de su posicion original en el eje Y*/
    transform: translateY(4rem);
    transform: translateY(-4rem);
    /*translacion en el eje Z que es el nivel de profundidas*/
    transform: translateZ(4rem);
    /*shorthand translate*/
    transform: translate(-4rem, 4rem);
    transform: translate(-50%, -50%);
    transform: scaleX(2);
    transform: scaleY(.5);
    transform: scaleZ(1.5);
    /*shorthand scale X, Y*/
    transform: scale(1.5, 1.5);
    transform: scale(-1, -1);
    transform: scale(-.5, -.5);

    /*rotacion*/
    transform: rotateX(60deg);
    transform: rotateX(90deg);
    transform: rotateY(90deg);
    transform: rotateZ(60deg);
    transform: rotateZ(-60deg);
    transform: rotate(360deg);
    transform: rotate(-360deg);
    transform: skewX(20deg);/*izquiera*/
    transform: skewX(-20deg);/*derechas*/
    transform: skew(20deg, 20deg);

    /*
    funcion matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())
    */
    transform: matrix(1,2,2,1,20,10);

    /*Transformaciones multiples en 2D*/
    transform: translate(25%, -50%) rotate(240deg) skew(10deg, 20deg) scale(-.5, -.5);
}

/*aplicando la perspectiva para utilizar transformaciones en 3D*/
.transform-3d{
    perspective: 10rem;
}

/*Transformaciones en 3D
  Para aplicar transformaciones en 3D es necesario activar la perspectiva
  La erspectiva la podemos invocar desde el elemento padre del elemento al que quereos aplicar la tranformacion en 3D
  por lo que para nuestro ejemplo podemos aplicar la perspectiva al elemento article
  La segundo opcion es qu antes de aplicar la transicion podemos activar la perspectiva*/
.transform-3d img{
    transition: 1.3s ease-in-out;
}

.transform-3d img:hover{
    transform: translateZ(4rem);
    transform: perspective(1000px) translateZ(4rem);
    transform: perspective(100rem) translateZ(4rem);
    transform: perspective(1rem) translateZ(4rem);
    transform: perspective(10rem) translateZ(4rem);
    transform: perspective(10rem) translateZ(-4rem);
    transform: translateZ(4rem);
    /*2rem eje x hacia la derecha, 50% eje y hacia abajo y -3rem de profundidad eje z*/
    transform: translate3d(2rem, 50%, -3rem);
    transform: scale3d(2, .5, 3);
    transform: rotateX(60deg);
    transform: rotateY(60deg);
    transform: rotate3d(1, 1, 1, 45deg);
    transform: rotate3d(1, .5, 0, -45deg);
    transform: rotate3d(-1, 2.5, -2, 60deg);
    transform: matrix3d(1,0,0,0,0,1,6,0,0,0,1,0,50,100,0,1.1);
    transform: rotate3d(-1, 2.5, -2, 60deg) translate3d(2rem, 50%, -3rem) scale3d(2, -.5, 3);
}

.transform-origin img{
    transition: transform 2s ease-in-out;
    /*transform-origin: x, y, z*/
    transform-origin: 50% 50% 0;
    transform-origin: 0 0;
    transform-origin: 0;
    transform-origin: top right;
    transform-origin: left center;
}

.transform-origin img:hover{
    transform: rotate(360deg);
}

/*a este elemento aplicamos la transformacion*/
.flip-card-1,
.flip-card-2 {
    border: thick solid #000;
    width: 600px;
    height: 400px;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5rem;

    position: relative;
    cursor: pointer;
    transition: transform 1s ease-in-out;
    perspective: 10rem;
    /*transform-style -> stablece si los hijos d un elemento que tiene perspectiva en 3 dimensiones
      esta propiedad determina como se va a comportar en el espacio 3D*/
      transform-style: flat;
      transform-style: preserve-3d;
}

.flip-card-1 img,
.flip-card-2 img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: 0% 50%;
}

.flip-card-2{
    transform-origin: center right;
}

.flip-card-1:hover{
    transform: rotateY(180deg);
}

.flip-card-2:hover{
    transform: translateX(-100%) rotateY(-180deg);
}

.flip-face{
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: visible;
    backface-visibility: hidden;
}

.flip-front{
    transform: rotateY(0deg);
}

.flip-back{
    transform: rotateY(180deg);
}

/* representacion de la linea de tiempo de myAwesomeAnimation */
@keyframes myAwesomeAnimation {
    /*toda animacion necesita un punto de entra y uno de salida*/
    /* definimos el fotograma de inicio */
    from{
        opacity: 0;
        transform: translateX(0);
    }

    /* definimos el fotograma final*/
    to{
        opacity: 1;
        transform: translateX(100%);
    }
}

.my-animation{
    /*animation: name duration timing-function delay iteration-count direction fill-mode play-state;*/
    animation-name: myAwesomeAnimation;
    animation-duration: 2s;
    animation-timing-function: cubic-bezier(1,0,0,1);
    animation-timing-function: cubic-bezier(.33, .92, .92, .36);
    animation-timing-function: ease-in-out;
    animation-delay: 150ms;
    animation-delay: 0; /*sin delay*/
    animation-iteration-count: 3; /*# de veces que se repetira la animacion*/
    animation-iteration-count: infinite;
    animation-iteration-count: 1;
    animation-direction: reverse;
    animation-direction: alternate;
    animation-direction: alternate-reverse;
    animation-direction: normal;
    /*al final de la animacion se queda con los estilos finales de al animacion*/
    animation-fill-mode: forwards;
    /*al inicio de la animacion se queda con los estilos iniciales de la animacion*/
    animation-fill-mode: backwards;
    /*both -> aplica al mismo tiempo el valor de forwards y backwards*/
    animation-fill-mode: both;
    animation: myAwesomeAnimation 1.5s ease 250ms 6 alternate both running;
}

@keyframes myAwesomeAnimation2 {
    0%{
        opacity: 0;
        transform: translateX(0);
    }

    50%{
        opacity: 0.5;
        transform: translateX(-50%);
    }

    75%{
        transform: translateX(-75%);
    }

    100%{
        opacity: 1;
        transform: translateX(100);
    }
}

.my-animation-2{
    animation: myAwesomeAnimation2 2s;
}

@keyframes multipleAnimation1 {
    0%{
        opacity: 1;
    }

    50%{
        opacity: 0;
    }

    100%{
        opacity: 1;
    }
}

@keyframes multipleAnimation2 {
    0% {
        transform: translateY(0);
    }

    50% {
        transform: translateY(-100%);
    }

    100% {
        transform: translateY(0);
    }
}

.animation-multiple{
    animation: multipleAnimation1 2s infinite, multipleAnimation2 2s infinite;
}